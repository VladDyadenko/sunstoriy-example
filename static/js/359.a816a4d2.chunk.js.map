{"version":3,"file":"static/js/359.a816a4d2.chunk.js","mappings":"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","sources":["components/ContainerMain/ContainerMain.styled.js","page/LogopedPage/LogopedPage.jsx","ui/TimeLessons/TimeLessons.stayled.js","ui/TimeLessons/TimeLessons.jsx","ui/MainTable/MainTable.styled.js","ui/MainTable/MainTable.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MainWrapper = styled.div`\n  width: 100%;\n  padding: 5px 5px;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  justify-content: start;\n  gap: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport MainTable from 'ui/MainTable/MainTable';\nimport { MainWrapper } from 'components/ContainerMain/ContainerMain.styled';\nimport Container from 'components/Container/Container';\nimport { selectLessonsLogoped } from 'redux/offices/officesSelector';\nimport { getDates } from 'components/FilterLesson/SelectDate/GetDateFunction';\nimport {\n  deleteLogopedLessonById,\n  logopedLessons,\n} from 'redux/offices/officesOperetion';\nimport FilterLesson from 'components/FilterLesson/FilterLesson';\nimport SelectDate from 'components/FilterLesson/SelectDate/SelectDate';\n\nconst LogopedPage = () => {\n  const lessonsChosePeriod = useSelector(selectLessonsLogoped);\n\n  const [teachers, setTeachers] = useState(null);\n  const [teacher, setTeacher] = useState([]);\n  const [lessons, setLessons] = useState(null);\n  const [dateCurrentLesson, setLessonDates] = useState(null);\n  const [type, setType] = useState('Період');\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const startDateFormat = dayjs().startOf('week').format('YYYY-MM-DD');\n    const endDateFormat = dayjs().endOf('week').format('YYYY-MM-DD');\n    const dateString = [startDateFormat, endDateFormat];\n\n    const startDate = new Date(dateString[0]);\n    const endDate = new Date(dateString[1]);\n    const dates = getDates(startDate, endDate);\n    const initialDates = dates?.map(date => date.valueOf());\n    const initialDateValues = initialDates?.map(date => date.valueOf());\n    setLessonDates(initialDateValues);\n    if (initialDateValues.length > 0) {\n      dispatch(logopedLessons(initialDateValues));\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    const uniqueTeachers = Array.from(\n      new Set(\n        lessonsChosePeriod?.map(\n          lesson => `${lesson.teacherName} ${lesson.teacherSurname}`\n        )\n      )\n    );\n    setTeachers(uniqueTeachers);\n  }, [lessonsChosePeriod]);\n\n  useEffect(() => {\n    if (lessonsChosePeriod && teacher && teacher.length > 0) {\n      const filteredLessons = lessonsChosePeriod?.filter(lesson => {\n        const teacherFullName = `${lesson.teacherName} ${lesson.teacherSurname}`;\n        return teacher.includes(teacherFullName);\n      });\n\n      setLessons(filteredLessons);\n    } else {\n      setLessons(lessonsChosePeriod);\n    }\n  }, [lessonsChosePeriod, teacher]);\n\n  const items = [\n    {\n      key: 1,\n      label: 'Параметри відбору',\n      children: (\n        <SelectDate\n          type={type}\n          setType={setType}\n          setLessonDates={setLessonDates}\n          dateCurrentLesson={dateCurrentLesson}\n          teachers={teachers}\n          teacher={teacher}\n          setTeacher={setTeacher}\n          onLessonsChange={lessons => dispatch(logopedLessons(lessons))}\n        />\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <Container>\n        <FilterLesson currentItems={items} />\n        <MainWrapper>\n          {lessons?.length > 0 && (\n            <MainTable\n              lessons={lessons}\n              onLessonsDelete={lesson => {\n                return dispatch(deleteLogopedLessonById(lesson._id));\n              }}\n              office=\"Логопед\"\n            />\n          )}\n        </MainWrapper>\n      </Container>\n    </>\n  );\n};\n\nexport default LogopedPage;\n","import styled from 'styled-components';\nimport { BsPlusCircleDotted } from 'react-icons/bs';\n\nexport const TimeContainer = styled.ul`\n  width: 50px;\n  display: block;\n  padding: 0 5px;\n  margin-right: 10px;\n  @media screen and (min-width: 375.1px) {\n    display: block;\n  }\n`;\nexport const TableItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  border-radius: 8px;\n  min-width: 50px;\n  height: 80px;\n  margin-bottom: 10px;\n\n  background-color: var(--main-blue);\n  color: var(--main-green);\n  border: 2px solid var(--main-green);\n`;\nexport const TableItemDefault = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  background-color: var(--main-blue);\n  border: 2px solid var(--main-green);\n  height: 70px;\n  min-width: 50px;\n  margin-bottom: 10px;\n`;\nexport const TimeItem = styled.p`\n  font-family: 'RobotoSlab';\n  font-weight: 900;\n  font-size: 14px;\n  width: 100%;\n  padding: 5px;\n`;\nexport const AddLessonLink = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n  background-color: var(--main-blue);\n  border: 2px solid var(--main-green);\n  height: 70px;\n  min-width: 50px;\n  margin-bottom: 10px;\n`;\nexport const IconAddLessonLink = styled(BsPlusCircleDotted)`\n  width: 30px;\n  height: 30px;\n  fill: #a9a9a9;\n  transition: cubic-bezier(0.4, 0, 0.2, 1) 100ms;\n\n  &:hover {\n    fill: var(--main-dark-blue);\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport { formatTimeRange } from 'assets/constants/transformation';\nimport {\n  AddLessonLink,\n  IconAddLessonLink,\n  TableItem,\n  TimeContainer,\n  TimeItem,\n} from './TimeLessons.stayled';\n\nfunction TimeLessons({ timeLessonOnList }) {\n  return (\n    <>\n      <TimeContainer>\n        <AddLessonLink>\n          <Link to={`/lesson`}>\n            <IconAddLessonLink />\n          </Link>\n        </AddLessonLink>\n        {timeLessonOnList?.map((time, index) => {\n          return (\n            <TableItem key={time + index}>\n              <TimeItem>{formatTimeRange(time)}</TimeItem>\n            </TableItem>\n          );\n        })}\n      </TimeContainer>\n    </>\n  );\n}\n\nexport default TimeLessons;\n","import styled from 'styled-components';\n\nexport const DayWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: start;\n  justify-content: start;\n  flex-direction: row;\n  gap: 10px;\n\n  @media screen and (min-width: 768px) {\n    width: 100%;\n    flex-direction: row;\n    align-items: center;\n  }\n`;\nexport const LessonsWrapper = styled.div`\n  width: 100%;\n  overflow-x: auto;\n  padding: 0 10px;\n`;\nexport const MainTableContainer = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: start;\n  justify-content: center;\n  gap: 15px;\n`;\nexport const DayDeafult = styled.div`\n  font-family: 'RobotoSlab';\n  font-weight: 400;\n  border-radius: 8px;\n  height: 70px;\n  width: 100%;\n  min-width: 200px;\n  max-width: 250px;\n  padding: 5px;\n  margin-bottom: 10px;\n  background-color: var(--main-blue);\n  border: 2px solid var(--main-green);\n`;\n\nexport const DayDeafultInfo = styled.p`\n  font-family: 'RobotoSlab';\n  font-weight: 900;\n  text-align: center;\n  color: var(--main-green);\n  margin-bottom: 10px;\n`;\nexport const DayContainer = styled.div`\n  width: 250px;\n  text-align: center;\n  border-radius: 8px;\n  margin-bottom: 10px;\n\n  @media screen and (min-width: 376px) {\n    margin-right: 10px;\n  }\n`;\n\nexport const LessonsContainer = styled.ul``;\nexport const LessonsItem = styled.li`\n  font-family: 'RobotoSlab';\n  font-weight: 400;\n  cursor: pointer;\n  height: 80px;\n  width: 250px;\n  flex-direction: column;\n  border-radius: 8px;\n  /* border: 2px solid transparent; */\n  margin-bottom: 10px;\n  transition: cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n\n  border: 2px solid ${props => props['aria-current'] || '#fff'};\n  color: ${props => props['aria-current'] || '#fff'};\n`;\n\nexport const CardInfo = styled.p`\n  font-family: 'RobotoSlab';\n  font-weight: 500;\n  font-size: 14px;\n  padding: 5px;\n  text-align: center;\n`;\nexport const OneTimeContainer = styled.ul`\n  padding: 0 5px;\n  :not(:last-child) {\n    margin-right: 5px;\n  }\n`;\nexport const OneTimeItem = styled.li`\n  height: 70px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import { Link } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport FreeTableItem from 'ui/FreeTableItem/FreeTableItem';\nimport LessonTableCard from 'ui/LessonTableCard/LessonTableCard';\nimport TimeLessons from 'ui/TimeLessons/TimeLessons';\nimport {\n  LessonsWrapper,\n  LessonsContainer,\n  LessonsItem,\n  DayDeafult,\n  DayDeafultInfo,\n  DayWrapper,\n  DayContainer,\n  MainTableContainer,\n} from './MainTable.styled';\nimport { formatDateRange, formatDay } from 'assets/constants/transformation';\n\nfunction MainTable({ lessons, onLessonsDelete, office }) {\n  const [uniquTime, setUniquTime] = useState(null);\n  const [uniquDate, setUniquDate] = useState(null);\n  const [groupedLessons, setGroupedLessons] = useState(null);\n\n  const extractTimeFromISOString = dateTimeString => {\n    const timeString = new Date(dateTimeString).toLocaleTimeString('en-US', {\n      timeZone: 'UTC',\n    });\n    return timeString;\n  };\n\n  useEffect(() => {\n    if (lessons) {\n      const areTimeIntervalsEqual = (intervalA, intervalB) => {\n        const roundedIntervalA = intervalA.map(extractTimeFromISOString);\n        const roundedIntervalB = intervalB.map(extractTimeFromISOString);\n        return (\n          roundedIntervalA[0] === roundedIntervalB[0] &&\n          roundedIntervalA[1] === roundedIntervalB[1]\n        );\n      };\n\n      const uniquTimeDate = lessons\n        .map(lesson => lesson.timeLesson)\n        .filter(\n          (time, index, self) =>\n            self.findIndex(t => areTimeIntervalsEqual(t, time)) === index\n        )\n        .sort((timeA, timeB) => {\n          const timePartA = timeA[0].split('T')[1];\n          const timePartB = timeB[0].split('T')[1];\n          return timePartA.localeCompare(timePartB);\n        });\n      setUniquTime(uniquTimeDate);\n\n      const uniqueDates = [...new Set(lessons.map(val => val.dateLesson))]\n        .map(dateString => new Date(dateString))\n        .sort((a, b) => a - b)\n        .map(date => date.toISOString());\n\n      setUniquDate(uniqueDates);\n\n      const groupedLessons = uniqueDates.map(date =>\n        lessons.filter(lesson => lesson.dateLesson === date)\n      );\n      setGroupedLessons(groupedLessons);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lessons]);\n\n  return (\n    <MainTableContainer>\n      <TimeLessons timeLessonOnList={uniquTime} />\n      <LessonsWrapper>\n        <DayWrapper>\n          {uniquDate?.map((date, index) => {\n            return (\n              <DayContainer key={index}>\n                <DayDeafult>\n                  <DayDeafultInfo>{formatDateRange(date)}</DayDeafultInfo>\n                  <DayDeafultInfo>{formatDay(date)}</DayDeafultInfo>\n                </DayDeafult>\n                <LessonsContainer>\n                  {uniquTime?.map((time, timeIndex) => {\n                    const lessonsWithSameTime = groupedLessons[index].filter(\n                      day => {\n                        const lessonTimes = day.timeLesson.map(timeString => {\n                          const lessonDate = new Date(timeString);\n                          return {\n                            hours: lessonDate.getHours(),\n                            minutes: lessonDate.getMinutes(),\n                            seconds: lessonDate.getSeconds(),\n                          };\n                        });\n\n                        const targetTime = time.map(timeString => {\n                          const targetDate = new Date(timeString);\n                          return {\n                            hours: targetDate.getHours(),\n                            minutes: targetDate.getMinutes(),\n                            seconds: targetDate.getSeconds(),\n                          };\n                        });\n\n                        return lessonTimes.some(lessonTime =>\n                          targetTime.some(\n                            target =>\n                              lessonTime.hours === target.hours &&\n                              lessonTime.minutes === target.minutes &&\n                              lessonTime.seconds === target.seconds\n                          )\n                        );\n                      }\n                    );\n\n                    const lesson =\n                      lessonsWithSameTime.length > 0\n                        ? lessonsWithSameTime[0]\n                        : null;\n\n                    return (\n                      <LessonsItem\n                        aria-current={lesson ? lesson.teacherColor : ''}\n                        key={timeIndex}\n                      >\n                        {lesson ? (\n                          <LessonTableCard\n                            lesson={lesson}\n                            onLessonsDelete={onLessonsDelete}\n                          />\n                        ) : (\n                          <Link\n                            to={`/lesson?dateFreeLesson=${date}&officeFreeLesson=${office}&timeFreeLesson=${JSON.stringify(\n                              time\n                            )}`}\n                          >\n                            <FreeTableItem />\n                          </Link>\n                        )}\n                      </LessonsItem>\n                    );\n                  })}\n                </LessonsContainer>\n              </DayContainer>\n            );\n          })}\n        </DayWrapper>\n      </LessonsWrapper>\n    </MainTableContainer>\n  );\n}\n\nexport default MainTable;\n"],"names":["MainWrapper","styled","div","_templateObject","_taggedTemplateLiteral","LogopedPage","lessonsChosePeriod","useSelector","selectLessonsLogoped","teachers","setTeachers","useState","teacher","setTeacher","lessons","setLessons","dateCurrentLesson","setLessonDates","type","setType","dispatch","useDispatch","useEffect","dateString","dayjs","startOf","format","endOf","startDate","Date","endDate","dates","getDates","initialDates","map","date","valueOf","initialDateValues","length","logopedLessons","uniqueTeachers","Array","from","Set","lesson","concat","teacherName","teacherSurname","filteredLessons","filter","teacherFullName","includes","items","key","label","children","_jsx","SelectDate","onLessonsChange","_Fragment","_jsxs","Container","FilterLesson","currentItems","MainTable","onLessonsDelete","deleteLogopedLessonById","_id","office","TimeContainer","ul","TableItem","li","_templateObject2","TimeItem","_templateObject3","p","_templateObject4","AddLessonLink","_templateObject5","IconAddLessonLink","BsPlusCircleDotted","_templateObject6","_ref","timeLessonOnList","Link","to","time","index","formatTimeRange","DayWrapper","LessonsWrapper","MainTableContainer","DayDeafult","DayDeafultInfo","DayContainer","LessonsContainer","_templateObject7","LessonsItem","_templateObject8","props","_templateObject9","_templateObject10","_templateObject11","uniquTime","setUniquTime","uniquDate","setUniquDate","groupedLessons","setGroupedLessons","extractTimeFromISOString","dateTimeString","toLocaleTimeString","timeZone","areTimeIntervalsEqual","intervalA","intervalB","roundedIntervalA","roundedIntervalB","uniquTimeDate","timeLesson","self","findIndex","t","sort","timeA","timeB","timePartA","split","timePartB","localeCompare","uniqueDates","val","dateLesson","a","b","toISOString","TimeLessons","formatDateRange","formatDay","timeIndex","lessonsWithSameTime","day","lessonTimes","timeString","lessonDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","targetTime","targetDate","some","lessonTime","target","teacherColor","LessonTableCard","JSON","stringify","FreeTableItem"],"sourceRoot":""}