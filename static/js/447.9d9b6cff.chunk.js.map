{"version":3,"file":"static/js/447.9d9b6cff.chunk.js","mappings":"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","sources":["components/ContainerMain/ContainerMain.styled.js","page/SensornayaPage/SensornayaPage.jsx","ui/TimeLessons/TimeLessons.stayled.js","ui/TimeLessons/TimeLessons.jsx","ui/MainTable/MainTable.styled.js","ui/MainTable/MainTable.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MainWrapper = styled.div`\n  width: 100%;\n  padding: 5px 5px;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  justify-content: start;\n  gap: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect, useState, memo } from 'react';\nimport dayjs from 'dayjs';\n\nimport MainTable from 'ui/MainTable/MainTable';\nimport Container from 'components/Container/Container';\nimport { MainWrapper } from 'components/ContainerMain/ContainerMain.styled';\nimport FilterLesson from 'components/FilterLesson/FilterLesson';\nimport { selectLessonsSensornaya } from 'redux/offices/officesSelector';\nimport {\n  deleteSensornayaLessonById,\n  sensornayaLessons,\n} from 'redux/offices/officesOperetion';\nimport { getDates } from 'components/FilterLesson/SelectDate/GetDateFunction';\nimport SelectDate from 'components/FilterLesson/SelectDate/SelectDate';\n\nfunction SensornayaPage() {\n  const lessonsChosePeriod = useSelector(selectLessonsSensornaya);\n\n  const [teachers, setTeachers] = useState(null);\n  const [teacher, setTeacher] = useState([]);\n  const [lessons, setLessons] = useState(null);\n  const [dateCurrentLesson, setLessonDates] = useState(null);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const startDateFormat = dayjs().startOf('week').format('YYYY-MM-DD');\n    const endDateFormat = dayjs().endOf('week').format('YYYY-MM-DD');\n    const dateString = [startDateFormat, endDateFormat];\n\n    const startDate = new Date(dateString[0]);\n    const endDate = new Date(dateString[1]);\n    const dates = getDates(startDate, endDate);\n    const initialDates = dates?.map(date => date.valueOf());\n    const initialDateValues = initialDates?.map(date => date.valueOf());\n    setLessonDates(initialDateValues);\n    if (initialDateValues.length > 0) {\n      dispatch(sensornayaLessons(initialDateValues));\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    const uniqueTeachers = Array.from(\n      new Set(\n        lessonsChosePeriod?.map(\n          lesson => `${lesson.teacherName} ${lesson.teacherSurname}`\n        )\n      )\n    );\n    setTeachers(uniqueTeachers);\n  }, [lessonsChosePeriod]);\n\n  useEffect(() => {\n    if (lessonsChosePeriod && teacher && teacher.length > 0) {\n      const filteredLessons = lessonsChosePeriod?.filter(lesson => {\n        const teacherFullName = `${lesson.teacherName} ${lesson.teacherSurname}`;\n        return teacher.includes(teacherFullName);\n      });\n\n      setLessons(filteredLessons);\n    } else {\n      setLessons(lessonsChosePeriod);\n    }\n  }, [lessonsChosePeriod, teacher]);\n  const [type, setType] = useState('Період');\n\n  const items = [\n    {\n      key: 1,\n      label: 'Параметри відбору',\n      children: (\n        <SelectDate\n          type={type}\n          setType={setType}\n          setLessonDates={setLessonDates}\n          dateCurrentLesson={dateCurrentLesson}\n          teachers={teachers}\n          teacher={teacher}\n          setTeacher={setTeacher}\n          onLessonsChange={lessons => dispatch(sensornayaLessons(lessons))}\n        />\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <Container>\n        <FilterLesson currentItems={items} />\n        <MainWrapper>\n          {lessons?.length > 0 && (\n            <MainTable\n              lessons={lessons}\n              onLessonsDelete={lesson => {\n                return dispatch(deleteSensornayaLessonById(lesson._id));\n              }}\n              office=\"Сенсорна\"\n            />\n          )}\n        </MainWrapper>\n      </Container>\n    </>\n  );\n}\n\nexport default memo(SensornayaPage);\n","import styled from 'styled-components';\nimport { BsPlusCircleDotted } from 'react-icons/bs';\n\nexport const TimeContainer = styled.ul`\n  width: 50px;\n  display: block;\n  padding: 0 5px;\n  margin-right: 10px;\n  @media screen and (min-width: 375.1px) {\n    display: block;\n  }\n`;\nexport const TableItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  border-radius: 8px;\n  min-width: 50px;\n  height: 80px;\n  margin-bottom: 10px;\n\n  background-color: var(--main-blue);\n  color: var(--main-green);\n  border: 2px solid var(--main-green);\n`;\nexport const TableItemDefault = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-radius: 8px;\n  background-color: var(--main-blue);\n  border: 2px solid var(--main-green);\n  height: 70px;\n  min-width: 50px;\n  margin-bottom: 10px;\n`;\nexport const TimeItem = styled.p`\n  font-family: 'RobotoSlab';\n  font-weight: 900;\n  font-size: 14px;\n  width: 100%;\n  padding: 5px;\n`;\nexport const AddLessonLink = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 8px;\n  background-color: var(--main-blue);\n  border: 2px solid var(--main-green);\n  height: 70px;\n  min-width: 50px;\n  margin-bottom: 10px;\n`;\nexport const IconAddLessonLink = styled(BsPlusCircleDotted)`\n  width: 30px;\n  height: 30px;\n  fill: #a9a9a9;\n  transition: cubic-bezier(0.4, 0, 0.2, 1) 100ms;\n\n  &:hover {\n    fill: var(--main-dark-blue);\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport { formatTimeRange } from 'assets/constants/transformation';\nimport {\n  AddLessonLink,\n  IconAddLessonLink,\n  TableItem,\n  TimeContainer,\n  TimeItem,\n} from './TimeLessons.stayled';\n\nfunction TimeLessons({ timeLessonOnList }) {\n  return (\n    <>\n      <TimeContainer>\n        <AddLessonLink>\n          <Link to={`/lesson`}>\n            <IconAddLessonLink />\n          </Link>\n        </AddLessonLink>\n        {timeLessonOnList?.map((time, index) => {\n          return (\n            <TableItem key={time + index}>\n              <TimeItem>{formatTimeRange(time)}</TimeItem>\n            </TableItem>\n          );\n        })}\n      </TimeContainer>\n    </>\n  );\n}\n\nexport default TimeLessons;\n","import styled from 'styled-components';\n\nexport const DayWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: start;\n  justify-content: start;\n  flex-direction: row;\n  gap: 10px;\n\n  @media screen and (min-width: 768px) {\n    width: 100%;\n    flex-direction: row;\n    align-items: center;\n  }\n`;\nexport const LessonsWrapper = styled.div`\n  width: 100%;\n  overflow-x: auto;\n  padding: 0 10px;\n`;\nexport const MainTableContainer = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: start;\n  justify-content: center;\n  gap: 15px;\n`;\nexport const DayDeafult = styled.div`\n  font-family: 'RobotoSlab';\n  font-weight: 400;\n  border-radius: 8px;\n  height: 70px;\n  width: 100%;\n  min-width: 200px;\n  max-width: 250px;\n  padding: 5px;\n  margin-bottom: 10px;\n  background-color: var(--main-blue);\n  border: 2px solid var(--main-green);\n`;\n\nexport const DayDeafultInfo = styled.p`\n  font-family: 'RobotoSlab';\n  font-weight: 900;\n  text-align: center;\n  color: var(--main-green);\n  margin-bottom: 10px;\n`;\nexport const DayContainer = styled.div`\n  width: 250px;\n  text-align: center;\n  border-radius: 8px;\n  margin-bottom: 10px;\n\n  @media screen and (min-width: 376px) {\n    margin-right: 10px;\n  }\n`;\n\nexport const LessonsContainer = styled.ul``;\nexport const LessonsItem = styled.li`\n  font-family: 'RobotoSlab';\n  font-weight: 400;\n  cursor: pointer;\n  height: 80px;\n  width: 250px;\n  flex-direction: column;\n  border-radius: 8px;\n  /* border: 2px solid transparent; */\n  margin-bottom: 10px;\n  transition: cubic-bezier(0.4, 0, 0.2, 1) 250ms;\n\n  border: 2px solid ${props => props['aria-current'] || '#fff'};\n  color: ${props => props['aria-current'] || '#fff'};\n`;\n\nexport const CardInfo = styled.p`\n  font-family: 'RobotoSlab';\n  font-weight: 500;\n  font-size: 14px;\n  padding: 5px;\n  text-align: center;\n`;\nexport const OneTimeContainer = styled.ul`\n  padding: 0 5px;\n  :not(:last-child) {\n    margin-right: 5px;\n  }\n`;\nexport const OneTimeItem = styled.li`\n  height: 70px;\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import { Link } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport FreeTableItem from 'ui/FreeTableItem/FreeTableItem';\nimport LessonTableCard from 'ui/LessonTableCard/LessonTableCard';\nimport TimeLessons from 'ui/TimeLessons/TimeLessons';\nimport {\n  LessonsWrapper,\n  LessonsContainer,\n  LessonsItem,\n  DayDeafult,\n  DayDeafultInfo,\n  DayWrapper,\n  DayContainer,\n  MainTableContainer,\n} from './MainTable.styled';\nimport { formatDateRange, formatDay } from 'assets/constants/transformation';\n\nfunction MainTable({ lessons, onLessonsDelete, office }) {\n  const [uniquTime, setUniquTime] = useState(null);\n  const [uniquDate, setUniquDate] = useState(null);\n  const [groupedLessons, setGroupedLessons] = useState(null);\n\n  const extractTimeFromISOString = dateTimeString => {\n    const timeString = new Date(dateTimeString).toLocaleTimeString('en-US', {\n      timeZone: 'UTC',\n    });\n    return timeString;\n  };\n\n  useEffect(() => {\n    if (lessons) {\n      const areTimeIntervalsEqual = (intervalA, intervalB) => {\n        const roundedIntervalA = intervalA.map(extractTimeFromISOString);\n        const roundedIntervalB = intervalB.map(extractTimeFromISOString);\n        return (\n          roundedIntervalA[0] === roundedIntervalB[0] &&\n          roundedIntervalA[1] === roundedIntervalB[1]\n        );\n      };\n\n      const uniquTimeDate = lessons\n        .map(lesson => lesson.timeLesson)\n        .filter(\n          (time, index, self) =>\n            self.findIndex(t => areTimeIntervalsEqual(t, time)) === index\n        )\n        .sort((timeA, timeB) => {\n          const timePartA = timeA[0].split('T')[1];\n          const timePartB = timeB[0].split('T')[1];\n          return timePartA.localeCompare(timePartB);\n        });\n      setUniquTime(uniquTimeDate);\n\n      const uniqueDates = [...new Set(lessons.map(val => val.dateLesson))]\n        .map(dateString => new Date(dateString))\n        .sort((a, b) => a - b)\n        .map(date => date.toISOString());\n\n      setUniquDate(uniqueDates);\n\n      const groupedLessons = uniqueDates.map(date =>\n        lessons.filter(lesson => lesson.dateLesson === date)\n      );\n      setGroupedLessons(groupedLessons);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lessons]);\n\n  return (\n    <MainTableContainer>\n      <TimeLessons timeLessonOnList={uniquTime} />\n      <LessonsWrapper>\n        <DayWrapper>\n          {uniquDate?.map((date, index) => {\n            return (\n              <DayContainer key={index}>\n                <DayDeafult>\n                  <DayDeafultInfo>{formatDateRange(date)}</DayDeafultInfo>\n                  <DayDeafultInfo>{formatDay(date)}</DayDeafultInfo>\n                </DayDeafult>\n                <LessonsContainer>\n                  {uniquTime?.map((time, timeIndex) => {\n                    const lessonsWithSameTime = groupedLessons[index].filter(\n                      day => {\n                        const lessonTimes = day.timeLesson.map(timeString => {\n                          const lessonDate = new Date(timeString);\n                          return {\n                            hours: lessonDate.getHours(),\n                            minutes: lessonDate.getMinutes(),\n                            seconds: lessonDate.getSeconds(),\n                          };\n                        });\n\n                        const targetTime = time.map(timeString => {\n                          const targetDate = new Date(timeString);\n                          return {\n                            hours: targetDate.getHours(),\n                            minutes: targetDate.getMinutes(),\n                            seconds: targetDate.getSeconds(),\n                          };\n                        });\n\n                        return lessonTimes.some(lessonTime =>\n                          targetTime.some(\n                            target =>\n                              lessonTime.hours === target.hours &&\n                              lessonTime.minutes === target.minutes &&\n                              lessonTime.seconds === target.seconds\n                          )\n                        );\n                      }\n                    );\n\n                    const lesson =\n                      lessonsWithSameTime.length > 0\n                        ? lessonsWithSameTime[0]\n                        : null;\n\n                    return (\n                      <LessonsItem\n                        aria-current={lesson ? lesson.teacherColor : ''}\n                        key={timeIndex}\n                      >\n                        {lesson ? (\n                          <LessonTableCard\n                            lesson={lesson}\n                            onLessonsDelete={onLessonsDelete}\n                          />\n                        ) : (\n                          <Link\n                            to={`/lesson?dateFreeLesson=${date}&officeFreeLesson=${office}&timeFreeLesson=${JSON.stringify(\n                              time\n                            )}`}\n                          >\n                            <FreeTableItem />\n                          </Link>\n                        )}\n                      </LessonsItem>\n                    );\n                  })}\n                </LessonsContainer>\n              </DayContainer>\n            );\n          })}\n        </DayWrapper>\n      </LessonsWrapper>\n    </MainTableContainer>\n  );\n}\n\nexport default MainTable;\n"],"names":["MainWrapper","styled","div","_templateObject","_taggedTemplateLiteral","SensornayaPage","lessonsChosePeriod","useSelector","selectLessonsSensornaya","teachers","setTeachers","useState","teacher","setTeacher","lessons","setLessons","dateCurrentLesson","setLessonDates","dispatch","useDispatch","useEffect","dateString","dayjs","startOf","format","endOf","startDate","Date","endDate","dates","getDates","initialDates","map","date","valueOf","initialDateValues","length","sensornayaLessons","uniqueTeachers","Array","from","Set","lesson","concat","teacherName","teacherSurname","filteredLessons","filter","teacherFullName","includes","type","setType","items","key","label","children","_jsx","SelectDate","onLessonsChange","_Fragment","_jsxs","Container","FilterLesson","currentItems","MainTable","onLessonsDelete","deleteSensornayaLessonById","_id","office","memo","TimeContainer","ul","TableItem","li","_templateObject2","TimeItem","_templateObject3","p","_templateObject4","AddLessonLink","_templateObject5","IconAddLessonLink","BsPlusCircleDotted","_templateObject6","_ref","timeLessonOnList","Link","to","time","index","formatTimeRange","DayWrapper","LessonsWrapper","MainTableContainer","DayDeafult","DayDeafultInfo","DayContainer","LessonsContainer","_templateObject7","LessonsItem","_templateObject8","props","_templateObject9","_templateObject10","_templateObject11","uniquTime","setUniquTime","uniquDate","setUniquDate","groupedLessons","setGroupedLessons","extractTimeFromISOString","dateTimeString","toLocaleTimeString","timeZone","areTimeIntervalsEqual","intervalA","intervalB","roundedIntervalA","roundedIntervalB","uniquTimeDate","timeLesson","self","findIndex","t","sort","timeA","timeB","timePartA","split","timePartB","localeCompare","uniqueDates","val","dateLesson","a","b","toISOString","TimeLessons","formatDateRange","formatDay","timeIndex","lessonsWithSameTime","day","lessonTimes","timeString","lessonDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","targetTime","targetDate","some","lessonTime","target","teacherColor","LessonTableCard","JSON","stringify","FreeTableItem"],"sourceRoot":""}